#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
'''
msarch@free.fr * nov 2014 * bw-rev112
'''
from utils.toolkit import *

#--- SCENE --------------------------------------------------------------------
set_background_color(white)

#--- PATHS / PEGS ------------------------------------------------------------- TODO
#Peg(p2, (50,50)) # check if Peg concept is necessary. Replace w Point?
#Axis
#Grid

#--- SHAPES -------------------------------------------------------------------
gu = int(HEIGHT/85)  # grid unit size in pixel, used to size object relatively
V = HEIGHT  # base speed is one screen-height per second
W = WIDTH
e = 6 * gu
w = 11 * gu
h = 33 * gu
origin = Blip()
r = Rose()
bouncing_box=SCREEN

#verticaux
k1 = Rect(w=e, h=h, color=random_kapla(), peg=Peg(w/2, w/2+e, 0))
k2 = Rect(w=e, h=h, color=random_kapla(), peg=Peg(-w/2-e, w/2+e, 0))
k3 = Rect(w=e, h=h, color=random_kapla(), peg=Peg(w/2, -h-e-w/2, 0))
k4 = Rect(w=e, h=h, color=random_kapla(), peg=Peg(-w/2 - e, -h-e-w/2, 0))
#horizontaux
k5 = Rect(w=h+(W/2.0-w-2*e), h=e, color=random_kapla(), peg=Peg(w/2 + e, w/2, 0))
k6 = Rect(w=h+(W/2.0-w-2*e), h=e, color=random_kapla(), peg=Peg(w/2 + e, -w/2-e, 0))
k7 = Rect(w=h+(W/2.0-h-2*e), h=e, color=random_kapla(), peg=Peg(-W/2, w/2, 0))
k8 = Rect(w=h+(W/2.0-h-2*e), h=e, color=random_kapla(), peg=Peg(-W/2, -w/2-e, 0))

s1 = Rect(w=h, h=w, color=random_kapla(), peg=Peg(-h/2, -w/2, 0))
s2 = Rect(w=w, h=h, color=random_kapla(), peg=Peg(-w/2, -h/2, 0))

show(k1,k2,k3,k4,k5,k6,k7,k8,s1,s2)

#--- COLLECT ------------------------------------------------------------------
'''
shapes are added to Composite shapes
any attribute can be added to groups as well as shapes
'''
#Composite  # possibly giv peg TODO


#--- RULES --------------------------------------------------------------------
'''
ordrered list of rules.
syntax : Rule(rule name, Actor(s)=target shape(s), named rule args=value)
'''
s1.vel=Vel(W,0,0)
s2.vel=Vel(0,V,0)
sl=Slide(s1, s2)
bnc=Bounce(s1, s2, box=bouncing_box)  # add broadcast = True                   TODO
bnc.start()
sl.start()
# voir d√©corateurs pour conditional rules et broadcast rules                    TODO

#------------------------------------------------------------------------------
